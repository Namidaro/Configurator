using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;
using UniconGS.Source;

namespace UniconGS.UI.Schedule
{
    /// <summary>
    /// Interaction logic for Schedule.xaml
    /// </summary>
    public partial class Schedule : IQuery
    {
        #region Events
        public delegate object OpenFromFileEventHandler(Type type);
        public event OpenFromFileEventHandler OpenFromFile;

        public delegate void SaveInFileEventHandler(object value, Type type);
        public event SaveInFileEventHandler SaveInFile;

        public delegate void ShowMessageEventHandler(string message, string caption, MessageBoxImage image);
        public event ShowMessageEventHandler ShowMessage;

        public delegate void StartWorkEventHandler();
        public delegate void StopWorkEventHandler();

        public event StartWorkEventHandler StartWork;
        public event StopWorkEventHandler StopWork;

        private delegate void ReadComplete(ushort[] res);
        private delegate void WriteComplete(bool res);
        #endregion

        #region Globals
        private GraphicValue _value;
        private Slot _querer;
        #endregion
        public Schedule()
        {
            InitializeComponent();
            this._value = new GraphicValue(this.InitializeGraphic());
            this.uiMonther.SelectedIndex = 0;
            this.UpdateBinding();
        }

        public GraphicValue ScheduleValue
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
                this.UpdateBinding();
            }
        }
        public Visibility HasEconomy
        {
            get
            {
                return this.uiSaving.Visibility;
            }
            set
            {
                this.uiSaving.Visibility = value;
            }
        }

        public void SetAutonomous()
        {
            this.uiExport.IsEnabled = false;
            this.uiImport.IsEnabled = false;
        }

        public void DisableAutonomous()
        {
            this.uiExport.IsEnabled = true;
            this.uiImport.IsEnabled = true;
        }
        
        private void uiImport_Click(object sender, RoutedEventArgs e)
        {
            uiExport.IsEnabled = uiImport.IsEnabled = uiOpen.IsEnabled = uiSave.IsEnabled = false;
            DataTransfer.SetTopInQueue(this, Accsess.Read, false);     
        }

        private void ImportComplete(ushort[] value)
        {
            if (value != null)
            {
                if (value.First() == 0xFF)
                {
                    this.ShowMessage("График пуст",
                           "Чтение графика", MessageBoxImage.Information);
                }
                else
                {
                    this._value = GraphicValue.SetValue(this.InitializeGraphic(), value);
                    this.UpdateBinding();
                    if (this.ShowMessage != null)
                    {
                        this.ShowMessage("Чтение графика прошло успешно",
                            "Чтение графика", MessageBoxImage.Information);
                    }
                }
            }
            else
            {
                if (this.ShowMessage != null)
                {
                    this.ShowMessage("Во время чтения графика из устройства произошла ошибка.",
                        "Чтение графика", MessageBoxImage.Error);
                }
            }
            uiExport.IsEnabled = uiImport.IsEnabled = uiOpen.IsEnabled = uiSave.IsEnabled = true;
        }
        private void uiExport_Click(object sender, RoutedEventArgs e)
        {
            uiExport.IsEnabled = uiImport.IsEnabled = uiOpen.IsEnabled = uiSave.IsEnabled = false;
            DataTransfer.SetTopInQueue(this, Accsess.Write, false);
        }

        public void ExportComplete(bool res)
        {
            if (res)
            {
                if (this.ShowMessage != null)
                {
                    this.ShowMessage("Запись графика в устройство прошло успешно.",
                        "Запись графика в устройство", MessageBoxImage.Information);
                }
            }
            else
            {
                if (this.ShowMessage != null)
                {
                    this.ShowMessage("Во время записи графика в устройство произошла ошибка.",
                        "Запись графика в устройство", MessageBoxImage.Error);
                }
            }
            uiExport.IsEnabled = uiImport.IsEnabled = uiOpen.IsEnabled = uiSave.IsEnabled = true;
        }

        private void uiOpen_Click(object sender, RoutedEventArgs e)
        {
            uiExport.IsEnabled = uiImport.IsEnabled = uiOpen.IsEnabled = uiSave.IsEnabled = false;
            if (this.OpenFromFile != null)
            {
                var result = this.OpenFromFile(typeof(GraphicValue));
                if (result != null)
                {
                    if (this.StartWork != null)
                        this.StartWork();
                    this._value = (GraphicValue)result;
                    this.UpdateBinding();
                    if (this.StopWork != null)
                        this.StopWork();
                }
            }
            uiExport.IsEnabled = uiImport.IsEnabled = uiOpen.IsEnabled = uiSave.IsEnabled = true;
        }

        private void uiSave_Click(object sender, RoutedEventArgs e)
        {
            uiExport.IsEnabled = uiImport.IsEnabled = uiOpen.IsEnabled = uiSave.IsEnabled = false;
            if (this.SaveInFile != null)
            {
                this.SaveInFile(this._value, typeof(GraphicValue));
            }
            uiExport.IsEnabled = uiImport.IsEnabled = uiOpen.IsEnabled = uiSave.IsEnabled = true;
        }

        private void uiMonther_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (this.StartWork != null)
                this.StartWork();
            this.uiDayter.DataContext =
                this._value.Month[this.uiMonther.SelectedIndex].Days.Where((w) => { return w.isVisible; })
                    .Select((s) => { return s; })
                    .ToList();
            if (this.StopWork != null)
                this.StopWork();
        }

        private void ItemAsCombo_GotFocus(object sender, RoutedEventArgs e)
        {
            if (e.Source is ComboBox)
            {
                ComboBox comboBox = (ComboBox)e.Source;
                this.uiDayter.SelectedItem = comboBox.DataContext;
            }
        }

        #region Privates
        private List<GraphicMonth> InitializeGraphic()
        {
            return new List<GraphicMonth>() 
            {
                new GraphicMonth("Январь", 1,true),
                new GraphicMonth("Февраль", 2,null),
                new GraphicMonth("Март", 3,true),
                new GraphicMonth("Апрель", 4,false),
                new GraphicMonth("Май", 5,true),
                new GraphicMonth("Июнь", 6,false),
                new GraphicMonth("Июль", 7,true),
                new GraphicMonth("Август", 8,true),
                new GraphicMonth("Сентябрь", 9,false),
                new GraphicMonth("Октябрь", 10,true),
                new GraphicMonth("Ноябрь", 11, false),
                new GraphicMonth("Декабрь", 12,true),
            };
        }

        private void SetGraphicValue(ushort[] value)
        {
            /*Подправить для экономии*/
            if (value is Array)
            {
                this._value = GraphicValue.SetValue(this.InitializeGraphic(), value);
                this.UpdateBinding();
            }
        }

        public ushort[] GetGraphicValue()
        {
            return this._value.GetValue();
        }

        private void UpdateBinding()
        {
            if (this.uiDayter != null && this.PART_TURNOFFDATE != null &&
                this.PART_TURNONDATE != null && this.PART_TURNOFFTIME != null &&
                this.PART_TURNONTIME != null && this.uiSaving != null &&
                this._value != null && this.uiMonther.SelectedIndex != -1)
            {
                if (this.StartWork != null)
                    this.StartWork();


                this.uiDayter.DataContext = this._value.Month[this.uiMonther.SelectedIndex].Days.Where((w) =>
                { return w.isVisible; }).Select((s) => { return s; }).ToList();
                this.PART_TURNOFFDATE.DataContext = this._value.YearSaving;
                this.PART_TURNONDATE.DataContext = this._value.YearSaving;
                /*Заглушка на экономию*/
                this.PART_TURNOFFTIME.DataContext = this._value.MonthSaving.TurnOffTime;
                this.PART_TURNONTIME.DataContext = this._value.MonthSaving.TurnOnTime;

                this.uiSaving.DataContext = this._value;

                if (this.StopWork != null)
                    this.StopWork();
            }
        }
        #endregion

        #region IQueryMember

        public Slot Querer
        {
            get
            {
                return this._querer;
            }
            set
            {
                this._querer = value;
            }
        }

        public ushort[] Value
        {
            get
            {
                return this.GetGraphicValue();
            }
            set
            {
                if (value != null)
                {
                    this.SetGraphicValue(value);
                }
            }
        }

        public void Update()
        {
            if (this.StartWork != null)
                Dispatcher.BeginInvoke(DispatcherPriority.SystemIdle, new Action(()=>this.StartWork()));
            var res = DataTransfer.ReadWords(Querer);
            this.Dispatcher.BeginInvoke(new ReadComplete(ImportComplete), DispatcherPriority.SystemIdle, res);
            if (this.StopWork != null)
                Dispatcher.BeginInvoke(DispatcherPriority.SystemIdle, new Action(()=>this.StopWork()));
        }

        public bool WriteContext()
        {
            if (this.StartWork != null)
                Dispatcher.BeginInvoke(DispatcherPriority.SystemIdle, new Action(()=>this.StartWork()));
            Querer.Value = this.Value;
            var res = DataTransfer.WriteWords(Querer);
            this.Dispatcher.BeginInvoke(new WriteComplete(ExportComplete), DispatcherPriority.SystemIdle, res);
            if (this.StopWork != null)
                Dispatcher.BeginInvoke(DispatcherPriority.SystemIdle, new Action(()=>this.StopWork()));
            return res;
        }
        #endregion
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using System.Threading;
using System.Windows.Threading;
using UniconGS.UI;
using UniconGS.Source;
using System.Xml.Serialization;
using System.IO;
using System.Diagnostics;
using Microsoft.Win32;
using UniconGS.Annotations;
using UniconGS.UI.Configuration;
using UniconGS.UI.DiscretModules;
using UniconGS.UI.GPRS;
using UniconGS.UI.HeatingSchedule;
using UniconGS.UI.Journal;
using UniconGS.UI.Schedule;
using UniconGS.UI.Settings;
using UniconGS.UI.Time;
using TabControl = System.Windows.Controls.TabControl;

namespace UniconGS
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        #region Globals
        private Slot _connectionChecker;
        private Config _config = null;
        private bool _isAutonomous = false;
        private Stack<bool> _connectionFail = new Stack<bool>(5);
        private bool _isAfterConnectionLost = false;
        public static Slot resetConst = new Slot(0x0302, 1, "PLC Reset Command");
        #endregion

        #region Threading
        private ManualResetEvent _shutDownEvent = new ManualResetEvent(true);
        private Thread _work;
        private int _updateRate = 500;
   


        #endregion

        #region Work thread
        private void DoWork()
        {
            while (true)
            {
                if (this._shutDownEvent.WaitOne(0))
                    return;

                this.ReadWriteData();

                /*Цикличное чтение имени устройства для определения состояния связи*/
                if (!this.GetConnectionState())
                {
                    this.Dispatcher.Invoke(DispatcherPriority.SystemIdle, new Action(this.ConnectionLost));
                }
                else
                {
                    this.ResumtConenctionLost();
                }
                Thread.Sleep(this._updateRate);
            }
        }

        private void TabItemSelected(object sender, SelectionChangedEventArgs e)
        {
            int tab = (sender as TabControl).SelectedIndex;
            switch (tab)
            {
                case 1:
                    try
                    {
                        if (DataTransfer.QueryQueue != null)
                        {
                            var temp =
                                DataTransfer.QueryQueue.ToArray()
                                    .Where(q => q.IsCycle == false)
                                    .Select(q => q)
                                    .ToArray();
                            DataTransfer.QueryQueue.Clear();
                            foreach (var t in temp)
                            {
                                DataTransfer.QueryQueue.Enqueue(t);
                            }
                            DataTransfer.QueryQueue.Enqueue(new Query(uiTime, true, Accsess.Read));
                            DataTransfer.QueryQueue.Enqueue(new Query(uiPiconDiagnostics, true, Accsess.Read));
                            DataTransfer.QueryQueue.Enqueue(new Query(uiDiagnosticsErrors, true, Accsess.Read));
                            DataTransfer.QueryQueue.Enqueue(new Query(uiSignalGSMLevel, true, Accsess.Read));
                            DataTransfer.QueryQueue.Enqueue(new Query(uiChannelsManagment, true, Accsess.Read));
                        }
                    }
                    catch (Exception)
                    {
                        //System.Windows.MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    break;
                case 2:
                    try
                    {
                        if (DataTransfer.QueryQueue != null)
                        {
                            var temp =
                                DataTransfer.QueryQueue.ToArray()
                                    .Where(q => q.IsCycle == false)
                                    .Select(q => q)
                                    .ToArray();
                            DataTransfer.QueryQueue.Clear();
                            foreach (var t in temp)
                            {
                                DataTransfer.QueryQueue.Enqueue(t);
                            }
                            DataTransfer.QueryQueue.Enqueue(new Query(uiErrors, true, Accsess.Read));
                            DataTransfer.QueryQueue.Enqueue(new Query(uiTurnOnErrors, true, Accsess.Read));
                            DataTransfer.QueryQueue.Enqueue(new Query(uiFuseErrors, true, Accsess.Read));
                            //DataTransfer.QueryQueue.Enqueue(new Query(uiMeter, true, Accsess.Read));
                            DataTransfer.QueryQueue.Enqueue(new Query(uiStates, true, Accsess.Read));
                            DataTransfer.QueryQueue.Enqueue(new Query(uiChannelsManagment, true, Accsess.Read));
                            DataTransfer.QueryQueue.Enqueue(new Query(uiSignalGSMLevel, true, Accsess.Read));
                        }
                    }
                    catch (Exception)
                    {
                        //System.Windows.MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    break;
                default:
                    try
                    {
                        if (DataTransfer.QueryQueue != null)
                        {
                            var temp =
                                DataTransfer.QueryQueue.ToArray()
                                    .Where(q => q.IsCycle == false)
                                    .Select(q => q)
                                    .ToArray();
                            DataTransfer.QueryQueue.Clear();
                            foreach (var t in temp)
                            {
                                DataTransfer.QueryQueue.Enqueue(t);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        System.Windows.MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    break;
            }
        }
        /// <summary>
        /// Метод чтения/записи.
        /// Обрабатывает один объект, стоящий в очереди
        /// </summary>
        private void ReadWriteData()
        {
            if (DataTransfer.QueryQueue != null && DataTransfer.QueryQueue.Count != 0)
            {
                this.Dispatcher.Invoke(DispatcherPriority.SystemIdle,
                    new Action(() => this.ReportUpdate(true, "Обновление данных")));
            }

            if (DataTransfer.QueryQueue != null && DataTransfer.QueryQueue.Count != 0)
            {
                var query = DataTransfer.QueryQueue.Dequeue();
                if (query.Operation == Accsess.Read)
                {
                    query.Update();
                }
                else
                {
                    query.WriteContext();
                }
                if (query.IsCycle)
                {
                    DataTransfer.QueryQueue.Enqueue(query);
                }
            }
            Dispatcher.Invoke(DispatcherPriority.SystemIdle,
                new Action(() => this.ReportUpdate(false, "Обновление окончено")));
        }
        #endregion

        #region Constructor
        public MainWindow()
        {
            InitializeComponent();
            this.InitSlots();

            this.uiTime.ShowMessage += new Time.ShowMessageEventHandler(ShowMessage);

            this.uiLogicConfig.ShowMessage += new LogicConfig.ShowMessageEventHandler(ShowMessage);
            this.uiLogicConfig.SaveInFile += new LogicConfig.SaveInFileEventHandler(uiLogicConfig_SaveInFile);
            this.uiLogicConfig.OpenFromFile += new LogicConfig.OpenFromFileEventHandler(uiLogicConfig_OpenFromFile);

            this.uiLightingSchedule.OpenFromFile += new Schedule.OpenFromFileEventHandler(uiLightingSchedule_OpenFromFile);
            this.uiLightingSchedule.SaveInFile += new Schedule.SaveInFileEventHandler(uiLightingSchedule_SaveInFile);
            this.uiLightingSchedule.ShowMessage += new Schedule.ShowMessageEventHandler(ShowMessage);

            this.uiBacklightSchedule.SaveInFile += new Schedule.SaveInFileEventHandler(uiLightingSchedule_SaveInFile);
            this.uiBacklightSchedule.OpenFromFile += new Schedule.OpenFromFileEventHandler(uiLightingSchedule_OpenFromFile);
            this.uiBacklightSchedule.ShowMessage += new Schedule.ShowMessageEventHandler(ShowMessage);

            this.uiIlluminationSchedule.SaveInFile += new Schedule.SaveInFileEventHandler(uiLightingSchedule_SaveInFile);
            this.uiIlluminationSchedule.OpenFromFile += new Schedule.OpenFromFileEventHandler(uiLightingSchedule_OpenFromFile);
            this.uiIlluminationSchedule.ShowMessage += new Schedule.ShowMessageEventHandler(ShowMessage);

            this.uiEnergySchedule.OpenFromFile += new Schedule.OpenFromFileEventHandler(uiEnergySchedul_OpenFromFile);
            this.uiEnergySchedule.SaveInFile += new Schedule.SaveInFileEventHandler(uiEnergySchedul_SaveInFile);
            this.uiEnergySchedule.ShowMessage += new Schedule.ShowMessageEventHandler(ShowMessage);

            this.uiGPRSConfig.ShowMessage += new GPRSConfiguration.ShowMessageEventHandler(ShowMessage);

            this.uiHeatingSchedule.ShowMessage += new HeatingSchedule.ShowMessageEventHandler(ShowMessage);

            this.uiSystemJournal.ShowMessage += new SystemJournal.ShowMessageEventHandler(ShowMessage);

            this.uiMeter.ShowMessage += new Meter.ShowMessageEventHandler(ShowMessage);

            this.uiLightingSchedule.StartWork += new Schedule.StartWorkEventHandler(ControlStartWork);
            this.uiBacklightSchedule.StartWork += new Schedule.StartWorkEventHandler(ControlStartWork);
            this.uiIlluminationSchedule.StartWork += new Schedule.StartWorkEventHandler(ControlStartWork);
            this.uiHeatingSchedule.StartWork += new HeatingSchedule.StartWorkEventHandler(ControlStartWork);
            this.uiGPRSConfig.StartWork += new GPRSConfiguration.StartWorkEventHandler(ControlStartWork);
            this.uiLogicConfig.StartWork += new LogicConfig.StartWorkEventHandler(ControlStartWork);
            this.uiSystemJournal.StartWork += new SystemJournal.StartWorkEventHandler(ControlStartWork);

            this.uiLightingSchedule.StopWork += new Schedule.StopWorkEventHandler(ControlStopWork);
            this.uiBacklightSchedule.StopWork += new Schedule.StopWorkEventHandler(ControlStopWork);
            this.uiIlluminationSchedule.StopWork += new Schedule.StopWorkEventHandler(ControlStopWork);
            this.uiHeatingSchedule.StopWork += new HeatingSchedule.StopWorkEventHandler(ControlStopWork);
            this.uiGPRSConfig.StopWork += new GPRSConfiguration.StopWorkEventHandler(ControlStopWork);
            this.uiLogicConfig.StopWork += new LogicConfig.StopWorkEventHandler(ControlStopWork);
            this.uiSystemJournal.StopWork += new SystemJournal.StopWorkEventHandler(ControlStopWork);

            this.uiDisconnect.IsEnabled = false;
            this.uiStateIcon.Visibility = Visibility.Hidden;
            this.uiStatePresenter.Text = "";
            this.uiAutonomous.Click += new RoutedEventHandler(uiAutonomous_Click);
            this.uiDisconnectBtn.Click += new RoutedEventHandler(uiDisconnectBtn_Click);
            this.uiConnectBtn.Click += new RoutedEventHandler(uiConnectBtn_Click);
            this.uiAutonomousBtn.Click += new RoutedEventHandler(uiAutonomous_Click);
            this.uiMainControl.SelectedIndex = 0;

            this.uiReconnectBtn.Click += new RoutedEventHandler(uiReconnectBtn_Click);
            this.uiReconnect.Click += new RoutedEventHandler(uiReconnect_Click);
            //this.uiUserGydeBtn.Click += new RoutedEventHandler(uiUserGydeBtn_Click);
            this.uiUsersGyde.Click += new RoutedEventHandler(uiUsersGyde_Click);
            this.uiAbout.Click += new RoutedEventHandler(uiAbout_Click);

            this.uiSettings.GetControlsValue += new ControllerSettings.GetControlsValueDelegate(GetControlsValue);
            this.uiSettings.SetControlsValue += new ControllerSettings.SetValueControlsDelegate(SetValueControls);
            this.uiSettings.ShowMessage += new ControllerSettings.ShowMessageEventHandler(ShowMessage);
            this.uiSettings.StartWork += new ControllerSettings.StartWorkEventHandler(ControlStartWork);
            this.uiSettings.StopWork += new ControllerSettings.StopWorkEventHandler(ControlStopWork);
            this.uiSettings.IsAutonomous = this._isAutonomous;
            this.uiSettings.Config = this._config;
            this.uiSettings.SetSlots(this.uiLogicConfig.Querer, this.uiLightingSchedule.Querer,
                this.uiBacklightSchedule.Querer, this.uiIlluminationSchedule.Querer,
                this.uiEnergySchedule.Querer, this.uiHeatingSchedule.Querer, this.uiHeatingSchedule.Querer);
        }
        private void InitSlots()
        {
            this._connectionChecker = new Slot(0x0400, 52, "Check connection");
            this.uiTime.Querer = new Slot(0x1000, 16, "Clock");
            this.uiErrors.Querer = new Slot(0x0004, 1, "Errors");
            this.uiFuseErrors.Querer = new Slot(0x0303, 1, "FuseErrors");
            this.uiTurnOnErrors.Querer = new Slot(0x0304, 1, "KUErrors");
            this.uiMeter.Querer = new Slot(0x0208, 286, "MeterData");
            this.uiMeter.Querers = new List<Slot>()
            {
                new Slot(0x0208, 286, "MeterData"),
                new Slot(0x8290, 8, "MeterPassword")/*Слот для пароля*/
            };
            MainWindow.resetConst.Value = new ushort[1] { 1 };
            this.uiStates.Querer = new Slot(0x0005, 8, "StateIndexing");
            // this.uiChannelsManagment.Querers = new List<Slot>()
            //{
            //     new Slot(0x0002,2,"OutCommands"),
            //     new Slot(0x0000,2,"LocalCommands"),
            //     new Slot(0x0004,1,"ChannelManagmentErrors")
            // };
            /* LocalCommands - 2 слова с адреса 0х0000, 
             * OutCommands - 2 слова с адреса 0х0002,
             * ChannelManagmentErrors - 1 слова с адрса 0х0004 */
            this.uiChannelsManagment.Querer = new Slot(0x0000, 5, "ChanalsManagment");
            this.uiLogicConfig.Querer = new Slot(0x8200, 61, "Logic configuration");
            this.uiLightingSchedule.Querer = new Slot(0x8500, 770, "Lightning schedule");
            this.uiBacklightSchedule.Querer = new Slot(0x8802, 770, "Backlight schedule");
            this.uiIlluminationSchedule.Querer = new Slot(0x8B04, 770, "Illumination schedule");
            this.uiEnergySchedule.Querer = new Slot(0x8E06, 770, "Energy schedule");
            this.uiGPRSConfig.Querer = new Slot(0x8000, 128, "GPRSModemSettings");
            this.uiHeatingSchedule.Querer = new Slot(0x9108, 2, "Heating schedule");
            this.uiSystemJournal.Querer = new Slot(0x2001, 3910, "System journal");

            this.uiDiagnosticsErrors.Querer = new Slot(0x0300, 1, "DiagnosticsError");
            this.uiPiconDiagnostics.Querer = new Slot(0x0200, 5, "PiconModules");
            this.uiSignalGSMLevel.Querer = new Slot(0x001F, 8, "SignalGSMLevel");

            #region Config
            var config = Config.Open();
            if (config == null)
            {
                this._config = new Config();
            }
            else
                this._config = config;
            #endregion
        }
        #endregion

        #region Menu items click
        void uiAbout_Click(object sender, RoutedEventArgs e)
        {
            About ab = new About();
            ab.ShowDialog();
        }

        void uiUsersGyde_Click(object sender, RoutedEventArgs e)
        {
            RunDCOMInfo();
        }


        void uiAboutBtn_Click(object sender, RoutedEventArgs e)
        {
            RunDCOMInfo();
        }

        private void RunDCOMInfo()
        {
            this.RunProcess(new FileInfo(Directory.GetCurrentDirectory() + @"\Минск ГОРСВЕТ.chm"));
        }

        private bool RunProcess(FileInfo processFileInfo)
        {
            ProcessStartInfo procStartInfo = new ProcessStartInfo(processFileInfo.FullName);
            procStartInfo.Arguments = string.Empty /*"/f1 \"" + processFileInfo.Directory.FullName + "Setup.iss\" " + "/f2 \"" + processFileInfo.Directory.FullName + "Setup.log\""*/;
            Process proc = new Process();
            proc.StartInfo = procStartInfo;
            try
            {
                bool startresult = proc.Start();
            }
            catch (Exception)
            {
                //MessageBox.Show("", "", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            //proc.WaitForExit();
            /*Внимание: заглушка*/
            return true;
        }


        void uiReconnect_Click(object sender, RoutedEventArgs e)
        {
            this.uiReconnectBtn_Click(this, new RoutedEventArgs());
        }
        void uiDisconnect_Click(object sender, RoutedEventArgs e)
        {
            this.uiDisconnectBtn_Click(sender, e);
        }
        void uiAutonomous_Click(object sender, RoutedEventArgs e)
        {
            if (!this._isAutonomous)
            {
                this.Title = this.Title + "(Автономная работа)";
                this._isAutonomous = true;
                this.SetAllAutonomous();
            }
        }
        private void uiConnect_Click(object sender, RoutedEventArgs e)
        {
            this.uiConnectBtn_Click(sender, e);
        }



        private void uiExit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
        #endregion

        #region Buttons click
        void uiReconnectBtn_Click(object sender, RoutedEventArgs e)
        {
            this.uiDisconnect.IsEnabled = true;
            this.uiConnect.IsEnabled = false;
            this._isAutonomous = false;
            this.DisableAutonomous();
            this.Title = this.Title.Replace("(Автономная работа)", "");
            this._isAfterConnectionLost = false;
            this.Start();
        }
        private void uiConnectBtn_Click(object sender, RoutedEventArgs e)
        {
            CreateConnectionWizard.Result result = null;
            CreateConnectionWizard ccw = new CreateConnectionWizard();
            ccw.Owner = this;
            if (Convert.ToBoolean(ccw.ShowDialog()))
            {
                result = ccw.ResultDialog;

                DataTransfer.InitConnector(new Connector(result.PortName, result.KNNumber, result.DeviceNumber,
                    result.PortSpeed, result.Timeout));
                this.uiHider.Visibility = Visibility.Hidden;
                this.Start();
                this.uiDisconnect.IsEnabled = true;
                this.uiConnect.IsEnabled = false;
            }
        }
        private void uiDisconnectBtn_Click(object sender, RoutedEventArgs e)
        {
            this.Stop();
            if (!this._isAfterConnectionLost)
                DataTransfer.UnInit();
            this.SetAllDisable();
            this.uiConnect.IsEnabled = true;
            this.uiDisconnect.IsEnabled = false;
            this.uiStateIcon.Visibility = Visibility.Hidden;
            this.uiStatePresenter.Text = "";
            this.uiHider.Visibility = Visibility.Visible;
            this.uiConnectBtn.Visibility = System.Windows.Visibility.Visible;
            this.uiAutonomousBtn.Visibility = System.Windows.Visibility.Visible;
            this.uiDisconnectBtn.Visibility = System.Windows.Visibility.Collapsed;

            var tabItem = this.uiMainControl.Items[0] as TabItem;
            if (tabItem != null)
                tabItem.Visibility = Visibility.Visible;
            this.uiMainControl.SelectedIndex = 0;
            for (int i = 1; i < this.uiMainControl.Items.Count; i++)
            {
                var item = this.uiMainControl.Items[i] as TabItem;
                if (item != null)
                    item.IsEnabled = false;
            }
            this.uiConnect.IsEnabled = true;
            this.uiAutonomous.IsEnabled = true;
            this.uiDisconnect.IsEnabled = true;
        }
        #endregion

        #region Diagnostic

        private Settings GetControlsValue()
        {
            return new Settings(this.uiLogicConfig.Value, this.uiLightingSchedule.Value, this.uiBacklightSchedule.Value,
                this.uiIlluminationSchedule.Value, this.uiEnergySchedule.Value, this.uiHeatingSchedule.Value,
                this.uiGPRSConfig.Value);
        }

        private void SetValueControls(Settings settings)
        {
            this.uiLogicConfig.Value = settings.LogicConfig;
            this.uiLightingSchedule.Value = settings.LightSchedule;
            this.uiBacklightSchedule.Value = settings.BacklightSchedule;
            this.uiIlluminationSchedule.Value = settings.IlluminationSchedule;
            this.uiEnergySchedule.Value = settings.ConversationEnergy;
            this.uiHeatingSchedule.Value = settings.Heating;
            this.uiGPRSConfig.Value = settings.GPRS;

        }


        #endregion

        #region Config
        private object uiLogicConfig_OpenFromFile(Type type)
        {
            System.Windows.Forms.OpenFileDialog ofd = new System.Windows.Forms.OpenFileDialog();
            ofd.Filter = "Файл конфигурации логики|*.lc";
            ofd.Title = "Открытие файла конфигурации логики";
            ofd.InitialDirectory = this._config.LogicConfigInitialPath;
            if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                TextReader reader = null;
                try
                {
                    object result = null;
                    XmlSerializer s = new XmlSerializer(type);
                    reader = new StreamReader(ofd.FileName);
                    result = s.Deserialize(reader);
                    reader.Close();
                    System.Windows.MessageBox.Show("Открытие конфигурации логики прошло успешно.",
                        "Открытие конфигураци логики", MessageBoxButton.OK, MessageBoxImage.Information);
                    this._config.LogicConfigInitialPath = ofd.FileName;
                    return result;
                }
                catch (Exception)
                {
                    if (reader != null)
                        reader.Close();
                    System.Windows.MessageBox.Show("Во время открытия конфигурации логиги произошла ошибка.",
                        "Открытие конфигурации логики", MessageBoxButton.OK, MessageBoxImage.Error);
                    return null;
                }
            }
            else
            {
                return null;
            }
        }

        private void uiLogicConfig_SaveInFile(object value, Type type)
        {
            System.Windows.Forms.SaveFileDialog sfd = new System.Windows.Forms.SaveFileDialog();
            sfd.Filter = "Файл конфигурации логики|*.lc";
            sfd.Title = "Сохранение конфигурации логики в файл";
            sfd.FileName = "Кофигурация_логики1";
            sfd.InitialDirectory = this._config.LogicConfigInitialPath;
            if (sfd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                TextWriter writer = null;
                try
                {
                    XmlSerializer serializer = new XmlSerializer(type);
                    writer = new StreamWriter(sfd.FileName);
                    serializer.Serialize(writer, value);
                    writer.Close();
                    System.Windows.MessageBox.Show("Сохранение конфигурации логики прошло успешно.",
                        "Сохранение конфигурации логики", MessageBoxButton.OK, MessageBoxImage.Information);
                    this._config.LogicConfigInitialPath = sfd.FileName;
                }
                catch (Exception e)
                {
                    if (writer != null)
                        writer.Close();
                    System.Windows.MessageBox.Show("Во время сохранения кофигурации логики произошла ошибка.",
                        "Сохранение конфигурации логики", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        #endregion Config

        #region Shedules

        #region Lighting shedule
        private void uiLightingSchedule_SaveInFile(object value, Type type)
        {
            System.Windows.Forms.SaveFileDialog sfd = new System.Windows.Forms.SaveFileDialog();
            sfd.InitialDirectory = this._config.ScheduleInitialPath;
            sfd.Filter = "Файл графика|*.schld";
            sfd.Title = "Сохранение графика в файл";
            sfd.FileName = "График1";
            if (sfd.ShowDialog() != System.Windows.Forms.DialogResult.OK) return;
            TextWriter writer = null;
            try
            {
                XmlSerializer serializer = new XmlSerializer(type);
                writer = new StreamWriter(sfd.FileName);
                serializer.Serialize(writer, value);
                writer.Close();
                System.Windows.MessageBox.Show("Сохранение графика прошло успешно.",
                    "Сохранение графика", MessageBoxButton.OK, MessageBoxImage.Information);
                this._config.ScheduleInitialPath = new FileInfo(sfd.FileName).Directory.FullName;
            }
            catch (Exception e)
            {
                if (writer != null)
                    writer.Close();
                System.Windows.MessageBox.Show("Во время сохранения графика произошла ошибка.",
                    "Сохранение графика", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private object uiLightingSchedule_OpenFromFile(Type type)
        {
            System.Windows.Forms.OpenFileDialog ofd = new System.Windows.Forms.OpenFileDialog();
            ofd.Filter = "Файл графика|*.schld";
            ofd.Title = "Открытие файла графика";
            ofd.InitialDirectory = this._config.ScheduleInitialPath;
            if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                TextReader reader = null;
                try
                {
                    object result = null;
                    XmlSerializer s = new XmlSerializer(type);
                    reader = new StreamReader(ofd.FileName);
                    result = s.Deserialize(reader);
                    reader.Close();
                    System.Windows.MessageBox.Show("Открытие графика прошло успешно.",
                        "Открытие графика", MessageBoxButton.OK, MessageBoxImage.Information);
                    this._config.ScheduleInitialPath = ofd.FileName;
                    return result;
                }
                catch (Exception e)
                {
                    if (reader != null)
                        reader.Close();
                    System.Windows.MessageBox.Show("Во время открытия графика произошла ошибка.",
                        "Открытие графика", MessageBoxButton.OK, MessageBoxImage.Error);
                    return null;
                }
            }
            else
            {
                return null;
            }
        }
        #endregion Lighting shedule

        #region Energy shedule
        private void uiEnergySchedul_SaveInFile(object value, Type type)
        {
            System.Windows.Forms.SaveFileDialog sfd = new System.Windows.Forms.SaveFileDialog();
            sfd.InitialDirectory = this._config.ScheduleInitialPath;
            sfd.Filter = "Файл графика энергосбережения|*.eschld";
            sfd.Title = "Сохранение графика в файл";
            sfd.FileName = "График1";
            if (sfd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                TextWriter writer = null;
                try
                {
                    XmlSerializer serializer = new XmlSerializer(type);
                    writer = new StreamWriter(sfd.FileName);
                    serializer.Serialize(writer, value);
                    writer.Close();
                    System.Windows.MessageBox.Show("Сохранение графика прошло успешно.",
                        "Сохранение графика", MessageBoxButton.OK, MessageBoxImage.Information);
                    this._config.ScheduleInitialPath = new FileInfo(sfd.FileName).Directory.FullName;
                }
                catch (Exception e)
                {
                    if (writer != null)
                        writer.Close();
                    System.Windows.MessageBox.Show("Во время сохранения графика произошла ошибка.",
                        "Сохранение графика", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        private object uiEnergySchedul_OpenFromFile(Type type)
        {
            System.Windows.Forms.OpenFileDialog ofd = new System.Windows.Forms.OpenFileDialog();
            ofd.Filter = "Файл графика энергосбережения|*.eschld";
            ofd.Title = "Открытие файла графика";
            ofd.InitialDirectory = this._config.ScheduleInitialPath;
            if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                TextReader reader = null;
                try
                {
                    object result = null;
                    XmlSerializer s = new XmlSerializer(type);
                    reader = new StreamReader(ofd.FileName);
                    result = s.Deserialize(reader);
                    reader.Close();
                    System.Windows.MessageBox.Show("Открытие графика прошло успешно.",
                        "Открытие графика", MessageBoxButton.OK, MessageBoxImage.Information);
                    this._config.ScheduleInitialPath = ofd.FileName;
                    return result;
                }
                catch (Exception e)
                {
                    if (reader != null)
                        reader.Close();
                    System.Windows.MessageBox.Show("Во время открытия графика произошла ошибка.",
                        "Открытие графика", MessageBoxButton.OK, MessageBoxImage.Error);
                    return null;
                }
            }
            else
            {
                return null;
            }
        }
        #endregion Energy

        #endregion Shedules

        #region Autonomous mode
        private void SetAllAutonomous()
        {
            this.uiAutonomousBtn.Visibility = System.Windows.Visibility.Collapsed;
            if (!this._isAfterConnectionLost)
            {
                this.uiReconnectBtn.Visibility = System.Windows.Visibility.Collapsed;
                this.uiReconnect.IsEnabled = false;
            }
            else
            {
                this.uiReconnectBtn.Visibility = System.Windows.Visibility.Visible;
                this.uiReconnect.IsEnabled = true;
            }
            this.uiAutonomous.IsEnabled = false;
            this.uiDisconnect.IsEnabled = false;

            var tabItem = this.uiMainControl.Items[0] as TabItem;
            if (tabItem != null) { tabItem.Visibility = Visibility.Visible; }
            this.uiMainControl.SelectedIndex = 0;
            for (int i = 1; i < this.uiMainControl.Items.Count; i++)
            {
                var item = this.uiMainControl.Items[i] as TabItem;
                if (item != null)
                    item.IsEnabled = true;
            }

            if (DeviceSelection.SelectedDevice == 1)
            {
                uiRunoImage.Visibility = Visibility.Visible;


            }
            else if (DeviceSelection.SelectedDevice == 2)
            {
                uiRunoImage.Visibility = Visibility.Hidden;
                uiScrollViewer.Visibility = Visibility.Visible;
                uiDiagnosticsErrors.Visibility = Visibility.Visible;
                uiPiconDiagnostics.Visibility = Visibility.Visible;

            }

            this.uiTime.SetAutonomous();
            this.uiSettings.IsAutonomous = _isAutonomous;
            this.uiSystemJournal.SetAutonomous();
            this.uiLogicConfig.SetAutonomous();
            this.uiLightingSchedule.SetAutonomous();
            this.uiHeatingSchedule.SetAutonomous();
            this.uiGPRSConfig.SetAutonomous();
            this.uiIlluminationSchedule.SetAutonomous();
            this.uiBacklightSchedule.SetAutonomous();
            this.uiChannelsManagment.SetAutonomous();
            this.uiEnergySchedule.SetAutonomous();
            this.uiStatePresenter.Text = "Автономный режим";
            this.UpdateLayout();
        }

        private void DisableAutonomous()
        {
            this.uiConnectBtn.Visibility = System.Windows.Visibility.Collapsed;
            this.uiDisconnectBtn.Visibility = System.Windows.Visibility.Visible;
            this.uiAutonomousBtn.Visibility = System.Windows.Visibility.Collapsed;
            this.uiReconnectBtn.Visibility = System.Windows.Visibility.Visible;
            this.uiReconnect.IsEnabled = false;
            this.uiDisconnect.IsEnabled = true;
            this.uiConnect.IsEnabled = false;
            this.uiAutonomous.IsEnabled = false;

            this.uiMainControl.SelectedIndex = 1;
            for (int i = 1; i < this.uiMainControl.Items.Count; i++)
            {
                (this.uiMainControl.Items[i] as TabItem).IsEnabled = false;
            }
            this.uiTime.DisableAutonomous();
            this.uiSettings.IsAutonomous = _isAutonomous;
            this.uiSystemJournal.DisableAutonomous();
            this.uiLogicConfig.DisableAutonomous();
            this.uiLightingSchedule.DisableAutonomous();
            this.uiHeatingSchedule.DisableAutonomous();
            this.uiGPRSConfig.DisableAutonomous();
            this.uiIlluminationSchedule.DisableAutonomous();
            this.uiEnergySchedule.DisableAutonomous();
            this.uiBacklightSchedule.DisableAutonomous();
        }
        #endregion

        #region Common
        #region Thread managment
        public void Start()
        {
            this._work = new Thread(this.DoWork);
            this._work.IsBackground = true;

            this._work.Priority = ThreadPriority.Lowest;
            this._work.Start();

            this._shutDownEvent.Reset();
            
            if (DeviceSelection.SelectedDevice == 1)
            {
                uiRunoImage.Visibility = Visibility.Visible;
            }
            else if (DeviceSelection.SelectedDevice == 2)
            {
                uiRunoImage.Visibility = Visibility.Hidden;
                uiScrollViewer.Visibility = Visibility.Visible;
                uiDiagnosticsErrors.Visibility = Visibility.Visible;
                uiPiconDiagnostics.Visibility = Visibility.Visible;

            }
            (this.uiMainControl.Items[0] as TabItem).Visibility = Visibility.Collapsed;
            this.uiMainControl.SelectedIndex = 1;
            for (int i = 1; i < this.uiMainControl.Items.Count; i++)
            {
                (this.uiMainControl.Items[i] as TabItem).IsEnabled = true;
            }
        }

        public void Stop()
        {
            this._shutDownEvent.Set();
            if (_work != null) this._work.Abort();
            this._work = null;

            if (DataTransfer.QueryQueue != null) DataTransfer.QueryQueue.Clear();
        }
        #endregion Thread
        private void ReportUpdate(bool value, string message)
        {
            if (value)
            {
                this.uiStateIcon.Visibility = Visibility.Visible;
                this.uiStatePresenter.Text = message;
            }
            else
            {
                this.uiStateIcon.Visibility = Visibility.Hidden;
                this.uiStatePresenter.Text = message;
            }
        }




        private bool GetConnectionState()
        {
            return null != DataTransfer.ReadWords(_connectionChecker);
        }
        private void ResumtConenctionLost()
        {
            this._connectionFail.Clear();
        }
        private void ConnectionLost()
        {
            try
            {
                this._connectionFail.Push(true);
                if (this._connectionFail.Count == 4)
                    throw new StackOverflowException();
                this.uiStatePresenter.Text = "Ошибка связи. Осталось попыток соединения - " + (4 - this._connectionFail.Count).ToString() + "...";
            }
            catch (StackOverflowException)
            {
                this._connectionFail.Clear();
                /*Сообщение о разрыве связи*/
                if (System.Windows.MessageBox.Show("Связь с устройством потеряна. Перейти в автономный режим?",
                        "Внимание", MessageBoxButton.YesNo, MessageBoxImage.Exclamation) == MessageBoxResult.Yes)
                {
                    this._isAfterConnectionLost = true;
                    this.uiDisconnect_Click(this, new RoutedEventArgs());
                    this.uiAutonomous_Click(this, new RoutedEventArgs());
                }
                else
                {
                    this._isAfterConnectionLost = true;
                    this.uiDisconnect_Click(this, new RoutedEventArgs());
                    this.uiReconnectBtn.Visibility = System.Windows.Visibility.Visible;
                    this.uiReconnect.IsEnabled = true;
                }

            }
        }
        private void ShowMessage(string message, string caption, MessageBoxImage image)
        {
            System.Windows.MessageBox.Show(message, caption, MessageBoxButton.OK, image);
        }
        private void SetAllDisable()
        {
            this.uiTime.Value = null;
            this.uiErrors.Value = null;
            this.uiFuseErrors.Value = null;
            this.uiTurnOnErrors.Value = null;
            this.uiMeter.Value = null;
            this.uiStates.Value = null;
            this.uiChannelsManagment.Value = null;
            this.uiSignalGSMLevel.Value = null;
        }
        private void ControlStopWork()
        {
            this.Cursor = System.Windows.Input.Cursors.Arrow;
        }

        private void ControlStartWork()
        {
            this.Cursor = System.Windows.Input.Cursors.Wait;
        }

        private void MainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            this._config.Save();
            this.uiDisconnectBtn_Click(this, new RoutedEventArgs());
        }
        #endregion Common


        private void uiDeviceSelection_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

    }
}

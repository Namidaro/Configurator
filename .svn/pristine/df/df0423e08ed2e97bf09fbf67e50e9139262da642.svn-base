using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Xml.Serialization;
using UniconGS.Source;
using System.ComponentModel;

namespace UniconGS.UI
{
    [Serializable]
    public class GraphicMonth
    {
        private string _name = string.Empty;

        public string MonthName
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        [XmlElement]
        public int Number { get; set; }
        [XmlArrayAttribute("Day")]
        public List<GraphicDay> Days { get; set; }
        [XmlElement]
        public GraphicMonthSaveing MonthSaving { get; set; }

        public GraphicMonth(string name, int number, List<GraphicDay> days, GraphicMonthSaveing monthSaving)
        {
            this.MonthName = name;
            this.Number = number;
            this.Days = days;
            this.MonthSaving = monthSaving;
        }

        public GraphicMonth(string name, int number, bool? is31DayMonth)
        {
            this.MonthName = name;
            this.Number = number;
            this.Days = new List<GraphicDay>(32);
            if (is31DayMonth.HasValue)
            {

                if (is31DayMonth.Value)
                {
                    for (int i = 0; i < 31; i++)
                    {
                        this.Days.Add(new GraphicDay((i + 1).ToString() + " Число"));
                    }
                }
                else
                {
                    for (int i = 0; i < 30; i++)
                    {
                        this.Days.Add(new GraphicDay((i + 1).ToString() + " Число"));
                    }
                    this.Days.Add(new GraphicDay((30 + 1).ToString() + " Число") { isVisible = false });
                }
            }
            else
            {
                for (int i = 0; i < 29; i++)
                {
                    this.Days.Add(new GraphicDay((i + 1).ToString() + " Число"));
                }
                this.Days.Add(new GraphicDay((29 + 1).ToString() + " Число") { isVisible = false });
                this.Days.Add(new GraphicDay((30 + 1).ToString() + " Число") { isVisible = false });
            }
            this.MonthSaving = new GraphicMonthSaveing(new GraphicTime(0, 0), new GraphicTime(0, 0));
        }

        public GraphicMonth()
        { }
    }
    [Serializable]
    public class GraphicDay
    {
        [XmlElement]
        public string Number { get; set; }
        [XmlElement]
        public GraphicTime TurnOnTime { get; set; }
        [XmlElement]
        public GraphicTime TurnOffTime { get; set; }

        public bool isVisible = true;

        public GraphicDay(string number, GraphicTime turnOnTime, GraphicTime turnOffTime)
        {
            this.Number = number;
            this.TurnOnTime = turnOnTime;
            this.TurnOffTime = turnOffTime;
        }

        public GraphicDay(string number)
        {
            this.Number = number;
            this.TurnOffTime = new GraphicTime(0, 0);
            this.TurnOnTime = new GraphicTime(0, 0);
        }

        public GraphicDay()
        { }
    }
    [Serializable]
    public class GraphicTime : INotifyPropertyChanged
    {
        private int _hour = 0;
        private int _minute = 0;

        public int Hour
        {
            get
            {
                return this._hour;
            }
            set
            {
                this._hour = value;
                onPropertyChanged("Hour");
            }
        }

        public int Minute
        {
            get
            {
                return this._minute;
            }
            set
            {
                this._minute = value;
                onPropertyChanged("Minute");
            }
        }


        public GraphicTime(int hour, int minute)
        {
            this.Hour = hour;
            this.Minute = minute;
        }

        public GraphicTime()
        { }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;
        private void onPropertyChanged(string fieldName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(fieldName));
            }
        }
        #endregion
    }
    [Serializable]
    public class GraphicYearSaving
    {
        private int _turnOnDay = 1;
        private int _turnOffDay = 1;
        private int _turnOnMonth = 1;
        private int _turnOffMonth = 1;


        public int TurnOnMonth
        {
            get
            {
                return this._turnOnMonth;
            }
            set
            {
                this._turnOnMonth = value;
            }
        }

        public int TurnOnDay
        {
            get
            {
                return this._turnOnDay;
            }
            set
            {
                this._turnOnDay = value;
            }
        }

        public int TurnOffMonth
        {
            get
            {
                return this._turnOffMonth;
            }
            set
            {
                this._turnOffMonth = value;
            }
        }

        public int TurnOffDay
        {
            get
            {
                return this._turnOffDay;
            }
            set
            {
                this._turnOffDay = value;
            }
        }

        public GraphicYearSaving()
        {

        }

        public GraphicYearSaving(int turnOnMonth, int turnOnDay,
            int turnOffMonth, int turnOffDay)
        {
            this._turnOffDay = turnOffDay;
            this._turnOffMonth = turnOffMonth;
            this._turnOnDay = turnOnDay;
            this._turnOnMonth = turnOnMonth;
        }

    }
    [Serializable]
    public class GraphicMonthSaveing
    {
        private GraphicTime _turnOnTime = null;
        private GraphicTime _turnOffTime = null;

        [XmlElement]
        public GraphicTime TurnOnTime
        {
            get
            {
                return this._turnOnTime;
            }
            set
            {
                this._turnOnTime = value;
            }
        }
        [XmlElement]
        public GraphicTime TurnOffTime
        {

            get
            {
                return this._turnOffTime;
            }

            set
            {
                this._turnOffTime = value;
            }

        }

        public GraphicMonthSaveing()
        {
            this.TurnOffTime = new GraphicTime(0, 0);
            this.TurnOnTime = new GraphicTime(0, 0);
        }

        public GraphicMonthSaveing(GraphicTime turnOnTime, GraphicTime turnOffTime)
        {
            this.TurnOffTime = turnOffTime;
            this.TurnOnTime = turnOnTime;
        }
    }

    [XmlRootAttribute("Graphic", Namespace = "",
     IsNullable = false), Serializable]
    public class GraphicValue
    {
        [XmlElement]
        public List<GraphicMonth> Month { get; set; }
        [XmlElement]
        public GraphicYearSaving YearSaving { get; set; }
        [XmlElement]
        public GraphicMonthSaveing MonthSaving { get; set; }
        [XmlElement]
        public bool IsSavingTurnOn { get; set; }

        public GraphicValue(List<GraphicMonth> months, GraphicYearSaving yearSaving)
        {
            this.Month = months;
            this.YearSaving = yearSaving;
            this.MonthSaving = new GraphicMonthSaveing();
        }
        /*Заглушка на экономию*/
        public GraphicValue(List<GraphicMonth> months, GraphicYearSaving yearSaving, GraphicMonthSaveing monthSaving)
        {
            this.Month = months;
            this.YearSaving = yearSaving;
            /*Заглушка на экономию*/
            this.MonthSaving = monthSaving;
        }

        public GraphicValue(List<GraphicMonth> months)
        {
            this.Month = months;
            this.YearSaving = new GraphicYearSaving(1, 1, 1, 1);
            /*Заглушка на экономию*/
            this.MonthSaving = new GraphicMonthSaveing();
        }

        public GraphicValue()
        { }


        public ushort[] GetValue()
        {
            var tmp = new List<ushort>();
            foreach (var month in this.Month)
            {
                foreach (var day in month.Days)
                {
                    tmp.Add(BitConverter.ToUInt16(new byte[2] { Convert.ToByte(day.TurnOffTime.Minute), Convert.ToByte(day.TurnOffTime.Hour) }, 0));
                    tmp.Add(BitConverter.ToUInt16(new byte[2] { Convert.ToByte(day.TurnOnTime.Minute), Convert.ToByte(day.TurnOnTime.Hour) }, 0));
                }
                if (this.IsSavingTurnOn)
                {
                    /*Заглушка для экономии*/
                    tmp.Add(BitConverter.ToUInt16(new byte[2] { Convert.ToByte(/*month*/this.MonthSaving.TurnOffTime.Minute), Convert.ToByte(this.MonthSaving.TurnOffTime.Hour) }, 0));
                    tmp.Add(BitConverter.ToUInt16(new byte[2] { Convert.ToByte(/*month*/this.MonthSaving.TurnOnTime.Minute), Convert.ToByte(this.MonthSaving.TurnOnTime.Hour) }, 0));
                }
                else
                {
                    tmp.Add(0); tmp.Add(0);
                }
            }
            if (this.IsSavingTurnOn)
            {
                tmp.Add(BitConverter.ToUInt16(new byte[2] { Convert.ToByte(this.YearSaving.TurnOffDay), Convert.ToByte(this.YearSaving.TurnOffMonth) }, 0));
                tmp.Add(BitConverter.ToUInt16(new byte[2] { Convert.ToByte(this.YearSaving.TurnOnDay), Convert.ToByte(this.YearSaving.TurnOnMonth) }, 0));
            }
            else
            {
                tmp.Add(0); tmp.Add(0);
            }
            return tmp.ToArray();
        }

        public GraphicValue SetValue(List<GraphicMonth> months, ushort[] value)
        {
            GraphicValue tmp = new GraphicValue(months);
            int tmpCounter = 0;
            foreach (var month in tmp.Month)
            {
                foreach (var day in month.Days)
                {
                    var timeValue = BitConverter.GetBytes(value[tmpCounter]);
                    day.TurnOffTime.Hour = timeValue[1];
                    day.TurnOffTime.Minute = timeValue[0];
                    timeValue = BitConverter.GetBytes(value[tmpCounter + 1]);
                    day.TurnOnTime.Hour = timeValue[1];
                    day.TurnOnTime.Minute = timeValue[0];
                    tmpCounter = tmpCounter + 2;
                }
                var savingValue = BitConverter.GetBytes(value[tmpCounter]);
                month.MonthSaving.TurnOffTime.Hour = savingValue[1];
                month.MonthSaving.TurnOffTime.Minute = savingValue[0];
                savingValue = BitConverter.GetBytes(value[tmpCounter + 1]);
                month.MonthSaving.TurnOnTime.Hour = savingValue[1];
                month.MonthSaving.TurnOnTime.Minute = savingValue[0];
                tmpCounter = tmpCounter + 2;
            }
            var yearSavingValue = BitConverter.GetBytes(value[tmpCounter]);
            if (yearSavingValue[0] == 0)
            {
                tmp.IsSavingTurnOn = false;
                tmp.YearSaving.TurnOffMonth = 1;
                tmp.YearSaving.TurnOffDay = 1;
                tmp.YearSaving.TurnOnDay = 1;
                tmp.YearSaving.TurnOnMonth = 1;
                /*Заглушка для экономии*/
                tmp.MonthSaving = new GraphicMonthSaveing();
            }
            else
            {
                tmp.IsSavingTurnOn = true;
                tmp.YearSaving.TurnOffMonth = yearSavingValue[1];
                tmp.YearSaving.TurnOffDay = yearSavingValue[0];
                yearSavingValue = BitConverter.GetBytes(value[tmpCounter + 1]);
                tmp.YearSaving.TurnOnMonth = yearSavingValue[1];
                tmp.YearSaving.TurnOnDay = yearSavingValue[0];
                /*Заглушка для экономии*/
                tmp.MonthSaving = tmp.Month[0].MonthSaving;
            }
            return tmp;
        }
    }
    /// <summary>
    /// Interaction logic for Schedule.xaml
    /// </summary>
    public partial class Schedule : UserControl, IBaseControl
    {

        public Visibility HasEconomy
        {
            get
            {
                return this.uiSaving.Visibility;
            }
            set
            {
                this.uiSaving.Visibility = value;
            }
        }

        public void SetAutonomous()
        {
            this.uiExport.IsEnabled = false;
            this.uiImport.IsEnabled = false;
        }

        public void DisableAutonomous()
        {
            this.uiExport.IsEnabled = true;
            this.uiImport.IsEnabled = true;
        }

        #region Events
        public delegate object OpenFromFileEventHandler(Type type);
        public event OpenFromFileEventHandler OpenFromFile;

        public delegate void SaveInFileEventHandler(object value, Type type);
        public event SaveInFileEventHandler SaveInFile;

        public delegate void ShowMessageEventHandler(string message, string caption);
        public event ShowMessageEventHandler ShowMessage;

        public delegate void StartWorkEventHandler();
        public delegate void StopWorkEventHandler();

        public event StartWorkEventHandler StartWork;
        public event StopWorkEventHandler StopWork;
        #endregion

        #region Globals
        private GraphicValue _value = new GraphicValue();
        private Slot _querer = null;
        #endregion

        public GraphicValue ScheduleValue
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
                this.UpdateBinding();
            }
        }

        public Schedule()
        {
            InitializeComponent();
            this.uiMonther.SelectedIndex = 0;
            this.uiMonther.SelectionChanged += new SelectionChangedEventHandler(uiMonther_SelectionChanged);
            this._value = new GraphicValue(this.InitializeGraphic());
            this.UpdateBinding();
            this.uiSave.Click += new RoutedEventHandler(uiSave_Click);
            this.uiOpen.Click += new RoutedEventHandler(uiOpen_Click);
            this.uiExport.Click += new RoutedEventHandler(uiExport_Click);
            this.uiImport.Click += new RoutedEventHandler(uiImport_Click);
            //this.uiOpen1.Click += new RoutedEventHandler(uiOpen1_Click);
        }

        /*Не забыть убрать*/
        //void uiOpen1_Click(object sender, RoutedEventArgs e)
        //{
        //    GraphicValue v = new GraphicValue(this.InitializeGraphic());
        //    foreach (var item in v.Month)
        //    {
        //        foreach (var day in item.Days)
        //        {
        //            day.TurnOffTime = new GraphicTime(06, 01);
        //            day.TurnOnTime = new GraphicTime(21, 02);
        //        }
        //    }

        //    if (this.SaveInFile != null)
        //    {
        //        this.SaveInFile(v, typeof(GraphicValue));
        //    }
        //}

        public bool Export()
        {
            this._querer.Value = (this._value.GetValue() as Array).OfType<ushort>().ToArray();
            return DataTransfer.WriteWords(this._querer);
        }

        private void uiImport_Click(object sender, RoutedEventArgs e)
        {
            if (this.StartWork != null)
                this.StartWork();
            this._querer.Value = null;
            var result = DataTransfer.ReadWords(ref this._querer);
            if (result)
            {
                if ((this._querer.Value as Array).OfType<ushort>().First() == 0xFF)
                {
                    this.ShowMessage("График пуст",
                           "Чтение графика");
                }
                else
                {

                    this._value = this._value.SetValue(this.InitializeGraphic(), (this._querer.Value as Array).OfType<ushort>().ToArray());
                    this.UpdateBinding();
                    if (this.StopWork != null)
                        this.StopWork();
                    if (this.ShowMessage != null)
                    {
                        this.ShowMessage("Чтение графика прошло успешно",
                            "Чтение графика");
                    }
                }
            }
            else
            {
                if (this.StopWork != null)
                    this.StopWork();
                if (this.ShowMessage != null)
                {
                    this.ShowMessage("Во время чтения графика из устройства произошла ошибка.",
                        "Чтение графика");
                }
            }
        }

        private void uiExport_Click(object sender, RoutedEventArgs e)
        {
            if (this.StartWork != null)
                this.StartWork();
            if (this.Export())
            {
                if (this.StopWork != null)
                    this.StopWork();
                if (this.ShowMessage != null)
                {
                    this.ShowMessage("Запись графика в устройство прошло успешно.",
                        "Запись графика в устройство");
                }
            }
            else
            {
                if (this.StopWork != null)
                    this.StopWork();
                if (this.ShowMessage != null)
                {
                    this.ShowMessage("Во время записи графика в устройство произошла ошибка.",
                        "Запись графика в устройство");
                }
            }
        }

        private void uiOpen_Click(object sender, RoutedEventArgs e)
        {
            if (this.OpenFromFile != null)
            {
                var result = this.OpenFromFile(typeof(GraphicValue));
                if (result != null)
                {
                    if (this.StartWork != null)
                        this.StartWork();
                    this._value = (GraphicValue)result;
                    this.UpdateBinding();
                    if (this.StopWork != null)
                        this.StopWork();
                }
            }
        }

        private void uiSave_Click(object sender, RoutedEventArgs e)
        {
            if (this.SaveInFile != null)
            {
                this.SaveInFile(this._value, typeof(GraphicValue));
            }
        }

        private void uiMonther_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (this.StartWork != null)
                this.StartWork();
            this.uiDayter.DataContext = this._value.Month[this.uiMonther.SelectedIndex].Days.Where((w) => { return w.isVisible; }).Select((s) => { return s; }).ToList();
            //this.PART_TURNOFFTIME.DataContext = (this.uiMonther.SelectedItem as GraphicMonth).MonthSaving.TurnOffTime;
            //this.PART_TURNONTIME.DataContext = (this.uiMonther.SelectedItem as GraphicMonth).MonthSaving.TurnOnTime;
            if (this.StopWork != null)
                this.StopWork();
        }

        private void ItemAsCombo_GotFocus(object sender, RoutedEventArgs e)
        {
            if (e.Source is ComboBox)
            {
                ComboBox comboBox = (ComboBox)e.Source;
                this.uiDayter.SelectedItem = comboBox.DataContext;
            }
        }

        #region Privates
        private List<GraphicMonth> InitializeGraphic()
        {
            return new List<GraphicMonth>() 
            {
                new GraphicMonth("Январь", 1,true),
                new GraphicMonth("Февраль", 2,null),
                new GraphicMonth("Март", 3,true),
                new GraphicMonth("Апрель", 4,false),
                new GraphicMonth("Май", 5,true),
                new GraphicMonth("Июнь", 6,false),
                new GraphicMonth("Июль", 7,true),
                new GraphicMonth("Август", 8,true),
                new GraphicMonth("Сентябрь", 9,false),
                new GraphicMonth("Октябрь", 10,true),
                new GraphicMonth("Ноябрь", 11, false),
                new GraphicMonth("Декабрь", 12,true),
            };
        }

        private void SetGraphicValue(object value)
        {
            /*Подправить для экономии*/
            if (value is Array)
            {
                this._value = this._value.SetValue(this.InitializeGraphic(), (value as Array).OfType<ushort>().ToArray());
                this.UpdateBinding();
            }
        }

        public object GetGraphicValue()
        {
            return this._value.GetValue();
        }

        private void UpdateBinding()
        {
            if (this.uiDayter != null && this.PART_TURNOFFDATE != null &&
                this.PART_TURNONDATE != null && this.PART_TURNOFFTIME != null &&
                this.PART_TURNONTIME != null && this.uiSaving != null &&
                this._value != null && this.uiMonther.SelectedIndex != -1)
            {
                if (this.StartWork != null)
                    this.StartWork();


                this.uiDayter.DataContext = this._value.Month[this.uiMonther.SelectedIndex].Days.Where((w) =>
                { return w.isVisible; }).Select((s) => { return s; }).ToList();
                this.PART_TURNOFFDATE.DataContext = this._value.YearSaving;
                this.PART_TURNONDATE.DataContext = this._value.YearSaving;
                /*Заглушка на экономию*/
                this.PART_TURNOFFTIME.DataContext = this._value.MonthSaving.TurnOffTime;
                this.PART_TURNONTIME.DataContext = this._value.MonthSaving.TurnOnTime;

                this.uiSaving.DataContext = this._value;

                if (this.StopWork != null)
                    this.StopWork();
            }
        }
        #endregion

        #region IBaseControl Members

        public event Commands.StartUpdateEventHandler StartUpdate;

        public event Commands.StopUpdateEventHandler StopUpdate;

        public Slot Querer
        {
            get
            {
                return this._querer;
            }
            set
            {
                this._querer = value;
            }
        }

        public object Value
        {
            get
            {
                return this.GetGraphicValue();
            }
            set
            {
                if (value != null)
                {
                    if (value is Array)
                    {
                        this.SetGraphicValue(value);
                    }
                }
            }
        }

        public void Update()
        {
            throw new NotImplementedException();
        }

        public bool WriteContext()
        {
            throw new NotImplementedException();
        }

        #endregion

        #region IBaseControl Members


        public void CancelUpdate()
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}

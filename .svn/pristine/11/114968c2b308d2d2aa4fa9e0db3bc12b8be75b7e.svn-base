using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;
using UniconGS.Source;

namespace UniconGS.UI
{
    /// <summary>
    /// Interaction logic for Meter.xaml
    /// </summary>
    public partial class Meter : UserControl
    {
        #region Globals
        private ushort[] _value;
        private List<Slot> _querers = new List<Slot>();
        private const byte MaxPasswordLength = 8;

        private delegate void ReadComplete(ushort[] res);
        public delegate void StartWorkEventHandler();
        public delegate void StopWorkEventHandler();
        public event StartWorkEventHandler StartWork;
        public event StopWorkEventHandler StopWork;
        public delegate void ShowMessageEventHandler(string message, string caption, MessageBoxImage image);
        public event ShowMessageEventHandler ShowMessage;
        #endregion

        public Meter()
        {
            InitializeComponent();
        }

        //private void uiSetPassword_Click(object sender, RoutedEventArgs e)
        //{
        //    if (this.IsValidPassword())
        //    {
        //        DataTransfer.SetTopInQueue(this, Accsess.Write, false);
        //        uiSetPassword.IsEnabled = false;
        //    }
        //    else
        //    {
        //        if (this.ShowMessage != null)
        //        {
        //            this.ShowMessage("Неверный пароль. Длина не должна превышать 8 символов",
        //                "Задание пароля для счетчика.", MessageBoxImage.Warning);
        //        }
        //    }
        //}

        private bool SetPassword(string password)
        {
            if (this._querers[1] != null)
            {
                this._querers[1].Value = Converter.GetWordsFromString(password, MaxPasswordLength).ToArray();
                return DataTransfer.WriteWords(this._querers[1]);
            }
            else
            {
                return false;
            }
        }

        //private bool IsValidPassword()
        //{
        //    return this.uiPassword.Text.Length <= 8;
        //}

        private void DisableAll()
        {
            foreach (var item in this.PART_DATAHOLDER.Children)
            {
                if (item is Label)
                {
                    (item as Label).Content = "Нет значения";
                }
            }
        }

        private void SetAll(Label lable, ushort[] value, int sourceIndex)
        {
            ushort[] tmp = new ushort[16];
            if (value[0] == 0)
            {
                lable.Content = "Нет значения";
            }
            else
            {
                Array.Copy(value, sourceIndex, tmp, 0, 8);
                lable.Content = Converter.GetStringFromWords(tmp);
            }
        }
        private void SetAll(ushort[] value)
        {

            this.SetAll(this.uiDate, value, 8);
            this.SetAll(this.uiTime, value, 16);
            this.SetAll(this.uiSerialNumber, value, 24);
            this.SetAll(this.uiPowerA, value, 40);
            this.SetAll(this.uiPowerB, value, 48);
            this.SetAll(this.uiPowerC, value, 56);
            this.SetAll(this.uiVoltageA, value, 64);
            this.SetAll(this.uiVoltageB, value, 72);
            this.SetAll(this.uiVoltageC, value, 80);
            this.SetAll(this.uiCurrentA, value, 88);
            this.SetAll(this.uiCurrentB, value, 96);
            this.SetAll(this.uiCurrentC, value, 104);
            this.SetAll(this.uiEnergyO, value, 120);
            this.SetAll(this.uiEnergyM, value, 128);
            this.SetAll(this.uiEnergyD, value, 136);
        }

        void ReadCompleted(ushort[] value)
        {
            this.Value = value;
        }

        #region IQueryMember
        public ushort[] Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if (value == null)
                {
                    this.DisableAll();
                }
                else
                {
                    this.SetAll(value);
                    this._value = value;
                }

            }
        }
        public List<Slot> Querers
        {
            get
            {
                return this._querers;
            }
            set
            {
                this._querers = value;
                this.Querer = _querers[0];
            }
        }

        public Slot Querer { get; set; }

        public void Update()
        {
            var res = DataTransfer.ReadWords(this.Querer);
            this.Dispatcher.BeginInvoke(new ReadComplete(ReadCompleted), DispatcherPriority.SystemIdle, res);
        }

        //public bool WriteContext()
        //{
        //    if (this.StartWork != null)
        //        Dispatcher.BeginInvoke(DispatcherPriority.SystemIdle, new Action(() => this.StartWork()));

        //    var result = this.SetPassword(this.uiPassword.Text);
        //    if (this.StopWork != null)
        //        Dispatcher.BeginInvoke(DispatcherPriority.SystemIdle, new Action(() => this.StopWork()));
        //    if (result && this.ShowMessage != null)
        //    {
        //        this.ShowMessage("Пароль успешно записан.", "Задание пароля для счетчика.", MessageBoxImage.Warning);
        //    }
        //    else
        //    {
        //        this.ShowMessage("Во время задания пароля произошла ошибка.", "Задание пароля для счетчика.",
        //            MessageBoxImage.Error);
        //    }
        //    uiSetPassword.IsEnabled = true;
        //    return result;
        //}

        #endregion
    }
}

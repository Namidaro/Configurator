using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Media3D;
using UniconGS.Source;
using UniconGS.UI.Configuration;
using UniconGS.UI.GPRS;
using Table = UniconGS.UI.Schedule.Schedule;
using HeatingTable = UniconGS.UI.HeatingSchedule.HeatingSchedule;

namespace UniconGS.UI.Settings
{
    /// <summary>
    /// Логика взаимодействия для ControllerSettings.xaml
    /// </summary>
    public partial class ControllerSettings : IQuery
    {
        #region Fields
        public delegate void ShowMessageEventHandler(string message, string caption, MessageBoxImage image);
        public event ShowMessageEventHandler ShowMessage;

        public delegate void StartWorkEventHandler();
        public delegate void StopWorkEventHandler();

        public event StopWorkEventHandler StopWork;
        public event StartWorkEventHandler StartWork;

        private delegate void ReadCompleteDelegate(ushort[] res);
        private delegate void WriteCompleteDelegate(bool res);

        public delegate Settings GetControlsValueDelegate();
        public delegate void SetValueControlsDelegate(Settings settings);

        public event GetControlsValueDelegate GetControlsValue;
        public event SetValueControlsDelegate SetControlsValue;

        private Settings _settings;
        private bool _isWriteSettings;

        private Slot _logicConfig;
        private Slot _lightingSchedule;
        private Slot _backlightSchedule;
        private Slot _illuminationSchedule;
        private Slot _conservationEnergySchedule;
        private Slot _heatingSchedule;
        private Slot _gprsConfig;
        #endregion
        public bool IsAutonomous
        { get; set; }

        public Config Config
        { get; set; }

        public ControllerSettings()
        {
            InitializeComponent();
        }

        public void SetSlots(Slot s1, Slot s2, Slot s3, Slot s4, Slot s5, Slot s6, Slot s7)
        {
            _lightingSchedule = s1;
            _backlightSchedule = s2;
            _illuminationSchedule =s3;
            _logicConfig = s4;
            _conservationEnergySchedule = s5;
            _heatingSchedule = s6;
            _gprsConfig = s7;
        }

        #region Signature
        private void uiSignature_Click(object sender, RoutedEventArgs e)
        {
            uiSignature.IsEnabled = false;
            DataTransfer.SetTopInQueue(this, Accsess.Read, false);
        }
        private string GetSignatureString(List<ushort> value)
        {
            ushort[] deviceName = value.GetRange(0, 4).ToArray();
            ushort[] version = value.GetRange(8, 2).ToArray();
            ushort[] date = value.GetRange(16, 5).ToArray();

            var devName = "Имя устройства: " + Converter.GetStringFromWords(deviceName) + ";\r\n";
            var v = "Версия:  " + ((byte)(version[1] >> 8)).ToString() + "."
                    + ((byte)version[1]).ToString() + "."
                    + ((byte)(version[0] >> 8)).ToString() + "."
                    + ((byte)version[0]).ToString() + ";\n\r";
            var d = "Дата: " + Converter.GetStringFromWords(date) + ".";

            return devName + v + d;
        }

        private void ReadSignatureComplete(ushort[] value)
        {
            if (value == null)
            {
                ShowMessage("Ошибка чтения сигнауры", "Сигнатура устройства.", MessageBoxImage.Error);
            }
            else
            {
                ShowMessage(this.GetSignatureString((value).ToList()),"Сигнатура устройства.",
                    MessageBoxImage.Information);
            }
            uiSignature.IsEnabled = true;
        }
        #endregion Signature

        #region PLC reset
        private void uiPLCReset_Click(object sender, RoutedEventArgs e)
        {

            if (DataTransfer.WriteWords(MainWindow.resetConst))
            {
                ShowMessage("Контроллер был успешно сброшен.", "Внимание", MessageBoxImage.Information);
            }
            else
            {
                ShowMessage("Во время сброса контроллера произошла ошибка.", "Ошибка", MessageBoxImage.Error);
            }
            uiPLCReset.IsEnabled = true;
        }
       
        #endregion

        #region Settings
        private void ApplySettings()
        {
            if (!this.IsAutonomous)
            {
                if (this._settings == null)
                {
                    ShowMessage("Настройки не импортированы", "Ошибка импорта настроек", MessageBoxImage.Error);
                }
                else
                {
                    DataTransfer.SetTopInQueue(this, Accsess.Write, false);
                }
            }
            else
            {
                ShowMessage("Невозможно записать настройки в устройство в автономном режиме.", "Автономный режим",
                    MessageBoxImage.Exclamation);
            }
        }

        private void uiSaveSettings_Click(object sender, RoutedEventArgs e)
        {
            System.Windows.Forms.SaveFileDialog sfd = new System.Windows.Forms.SaveFileDialog();
            sfd.InitialDirectory = this.Config.AllSettingsExportInitialFilePath;
            sfd.Filter = "Файл настройки Руно|*.gsset";
            sfd.Title = "Сохранение настроек \"Руно\"";
            sfd.FileName = "Настройки1";
            if (sfd.ShowDialog() != System.Windows.Forms.DialogResult.OK) return;
            if (this.GetAllSettings().Save(sfd.FileName))
            {
                this.Config.AllSettingsExportInitialFilePath = sfd.FileName;
                ShowMessage("Файл сохранен успешно", "Сохранение настроек", MessageBoxImage.Information);
            }
            else
            {
                ShowMessage("Во время сохранения файла произошла ошибка", "Ошибка сохранения настроек", MessageBoxImage.Error);
            }
           uiSaveSettings.IsEnabled = true;
        }
        private void uiOpenSettings_Click(object sender, RoutedEventArgs e)
        {
          
            var ofd = new System.Windows.Forms.OpenFileDialog
            {
                Filter = "Файл настройки Руно|*.gsset",
                Title = "Открытие файла настройки \"Руно\"",
                InitialDirectory = this.Config.AllSettingsImportInitialFilePath
            };
            if (ofd.ShowDialog() != System.Windows.Forms.DialogResult.OK) return;
            if (System.IO.File.Exists(ofd.FileName))
            {
                if (this.SetAllSettings(Settings.Open(ofd.FileName)))
                {
                    this.Config.AllSettingsImportInitialFilePath = ofd.FileName;
                    SetControlsValue(_settings);
                    ShowMessage("Настройки успешно восстановлены и сейчас будут загружены в устройство.\nПожалуйста, подождите", "Восстановление настроек", MessageBoxImage.Information);
                    _isWriteSettings = true;
                    this.ApplySettings();
                }
                else
                {
                    ShowMessage("Во время открытия файла произошла ошибка", "Ошибка открытия настроек", MessageBoxImage.Error);
                }
            }
            else
            {
                ShowMessage("Выбранный файл не существует", "Ошибка открытия настроек", MessageBoxImage.Error);
            }

            uiOpenSettings.IsEnabled = true;
        }
        private Settings GetAllSettings()
        {
            if (StartWork != null)
                StartWork();
            //this.Dispatcher.Invoke(new Action(() => RefreshControls()));
            this._settings = this.GetControlsValue();
            if (StopWork != null)
                StopWork();
            return this._settings;
        }

        private bool SetAllSettings(Settings settings)
        {
            if (this.StartWork != null)
                StartWork();
            if (settings == null)
            {
                if(this.StopWork!=null)
                    this.StopWork();
                return false;
            }
            this._settings = settings;
            if (this.StopWork != null)
                this.StopWork();
            return true;
        }

        private bool WriteSettings()
        {
            if (this.StartWork != null)
                Dispatcher.BeginInvoke(new Action(() =>
                {
                    this.StartWork();
                    this.ProgBar.Value = 0;
                    this.ProgBar.Visibility = Visibility.Visible;
                    this.uiOpenSettings.IsEnabled = this.uiPLCReset.IsEnabled
                        = this.uiSignature.IsEnabled = uiSaveSettings.IsEnabled = false;
                }));
            bool result = true;
            string message = string.Empty;
            if (DataTransfer.WriteWords(this._logicConfig))
            {
                message += @"Конфигурация логики записана успешно.";
            }
            else
            {
                result = false;
                message += @"Ошибка записи конфигурации логики.";
            }
            Dispatcher.Invoke(new Action(this.PerformStep));
            if (DataTransfer.WriteWords(this._lightingSchedule))
            {
                message += @"График освещения записан успешно;" + "\r\n";
            }
            else
            {
                result = false;
                message += @"Ошибка записи графика освещения;" + "\r\n";
            }
            Dispatcher.Invoke(new Action(this.PerformStep));
            if (DataTransfer.WriteWords(this._backlightSchedule))
            {
                message += @"График подсветки записан успешно;" + "\r\n";
            }
            else
            {
                result = false;
                message += @"Ошибка записи графика подсветки;" + "\r\n";
            }
            Dispatcher.Invoke(new Action(this.PerformStep));
            if (DataTransfer.WriteWords(this._illuminationSchedule))
            {
                message += @"График иллюминации записан успешно;" + "\r\n";
            }
            else
            {
                result = false;
                message += @"Ошибка записи графика иллюминации;" + "\r\n";
            }
            Dispatcher.Invoke(new Action(this.PerformStep));
            if (DataTransfer.WriteWords(this._conservationEnergySchedule))
            {
                message += @"График энергосбережения записан успешно;" + "\r\n";
            }
            else
            {
                result = false;
                message += @"Ошибка записи графика энергосбережения;" + "\r\n";
            }
            Dispatcher.Invoke(new Action(this.PerformStep));
            if (DataTransfer.WriteWords(this._heatingSchedule))
            {
                message += @"График обогрева записан успешно;" + "\r\n";
            }
            else
            {
                result = false;
                message += @"Ошибка записи графика обогрева;" + "\r\n";
            }
            Dispatcher.Invoke(new Action(this.PerformStep));
            if (DataTransfer.WriteWords(this._gprsConfig))
            {
                message += @"Конфигурация GPRS-модема записана успешно;" + "\r\n";
            }
            else
            {
                result = false;
                message += @"Ошибка записи конйигурации GPRS-модема;" + "\r\n";
            }
            Dispatcher.Invoke(new Action(this.PerformStep));
            if (this.StopWork != null)
                Dispatcher.BeginInvoke(new Action(() =>
                {
                    this.StopWork();
                    this.ProgBar.Visibility = Visibility.Hidden;
                    this.uiOpenSettings.IsEnabled = uiSaveSettings.IsEnabled = true;
                    this.uiOpenSettings.IsEnabled = this.uiPLCReset.IsEnabled
                        = this.uiSignature.IsEnabled = uiSaveSettings.IsEnabled = true;
                }));
            if (result)
                ShowMessage(@"Применение настроек прошло успешно." + "\r\n" + message, "Применение настроек",
                    MessageBoxImage.Information);
            else
                ShowMessage(@"Во время применения настроек произошла(и) ошибка(и)." + "\r\n" + message,
                    "Ошибка сохранения настроек", MessageBoxImage.Error);
            return result;
        }

        private void PerformStep()
        {
            ProgBar.Value++;
        }
        #endregion Settings

        #region IQueryMember
        public Slot Querer
        { get; set; }

        public ushort[] Value
        { get; set; }

        public void Update()
        {
            Querer = new Slot(0x0400, 52, "PLC Signature");
            var res = DataTransfer.ReadWords(Querer);
            this.Dispatcher.BeginInvoke(new ReadCompleteDelegate(ReadSignatureComplete), res);
        }

        public bool WriteContext()
        {
            throw new NotImplementedException();
        }

        //public bool WriteContext()
        //{
        //    if (_isWriteSettings)
        //    {
        //        return WriteSettings();
        //    }
        //    else
        //    {
        //        Querer = new Slot(0x0302, 1, "PLC Reset Command")
        //        {
        //            Value = new ushort[1] { 1 }
        //        };
        //        var res = DataTransfer.WriteWord(Querer);
        //        this.Dispatcher.BeginInvoke(new WriteCompleteDelegate(PlcResetComplete), res);
        //        return res;
        //    }
        //}

        #endregion
    }
}

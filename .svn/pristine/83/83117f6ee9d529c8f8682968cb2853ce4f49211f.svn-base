using Microsoft.Practices.ObjectBuilder2;
using Prism.Mvvm;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using Prism.Commands;
using UniconGS.Source;
using UniconGS.UI.MRNetworking.Model;

namespace UniconGS.UI.MRNetworking.ViewModel
{
    public class ModbusMemoryViewModel : BindableBase, IQuery
    {
        #region Private fields

        private ObservableCollection<ModbusMemoryEntityViewModel> _modbusMemoryEntityViewModels;
        private ModbusMemorySettingsViewModel _modbusMemorySettingsViewModel;
        private bool _isQueriesStarted;
        private List<ModbusConversionParametersViewModel> _modbusConversionParametersViewModels;
        private string _nameForUi;

        #endregion

        #region C-tor 

        public ModbusMemoryViewModel()
        {
            ModbusMemoryEntityViewModels = new ObservableCollection<ModbusMemoryEntityViewModel>();
            _modbusConversionParametersViewModels = new List<ModbusConversionParametersViewModel>(32);
            ModbusMemorySettingsViewModel = new ModbusMemorySettingsViewModel();
            OnModbusMemorySettingsChanged(ModbusMemorySettingsViewModel.GetModbusMemorySettings());
            EditEntityCommand = new DelegateCommand<ModbusMemoryEntityViewModel>(OnExecuteEditEntity);

        }


        private void OnExecuteEditEntity(ModbusMemoryEntityViewModel modbusMemoryEntityViewModel)
        {

            ModbusEntityEditingViewModel modbusEntityEditingViewModel =new ModbusEntityEditingViewModel();
            modbusEntityEditingViewModel.SetEntity(modbusMemoryEntityViewModel.Clone() as ModbusMemoryEntityViewModel);

            MRNetworkingEditingViewxaml window=new MRNetworkingEditingViewxaml();
            window.DataContext = modbusEntityEditingViewModel;
            window.ShowDialog();
         
           // if (!IsQueriesStarted) OnExecuteOneQuery();
        }





        #endregion

        #region Implementation of IModbusMemoryViewModel

        public ICommand EditEntityCommand { get; }

        public ObservableCollection<ModbusMemoryEntityViewModel> ModbusMemoryEntityViewModels
        {
            get { return _modbusMemoryEntityViewModels; }
            set
            {
                _modbusMemoryEntityViewModels = value;
                RaisePropertyChanged();
            }
        }

        public ModbusMemorySettingsViewModel ModbusMemorySettingsViewModel
        {
            get { return _modbusMemorySettingsViewModel; }
            set
            {
                _modbusMemorySettingsViewModel = value;
                _modbusConversionParametersViewModels = new List<ModbusConversionParametersViewModel>(32);
                _modbusMemorySettingsViewModel.ModbusMemorySettingsChanged += OnModbusMemorySettingsChanged;
                OnModbusMemorySettingsChanged(_modbusMemorySettingsViewModel.GetModbusMemorySettings());
                RaisePropertyChanged();
            }
        }

        private void OnModbusMemorySettingsChanged(ModbusMemorySettings modbusMemorySettings)
        {
            if(modbusMemorySettings==null)return;
            StopUpdating();
            if (ModbusMemoryEntityViewModels.Count != modbusMemorySettings.NumberOfPoints)
            {
                ModbusMemoryEntityViewModels.Clear();
            }
            //всякие условия вокруг - оптимизация вывода, чтобы не перерисовывать все каждый раз
            for (int i = 0; i < modbusMemorySettings.NumberOfPoints; i++)
            {

                if (_modbusConversionParametersViewModels.Count < i + 1)
                {
                    _modbusConversionParametersViewModels.Add(new ModbusConversionParametersViewModel());
                }

                if (ModbusMemoryEntityViewModels.Count <= i)
                {
                    ModbusMemoryEntityViewModel modbusMemoryEntityViewModel =
                        new ModbusMemoryEntityViewModel(_modbusConversionParametersViewModels[i]);
                    ModbusMemoryEntityViewModels.Add(modbusMemoryEntityViewModel);
                }
                ModbusMemoryEntityViewModels[i].SetAddress(modbusMemorySettings.BaseAdress + i);
                ModbusMemoryEntityViewModels[i].SetError();
            }
            if (IsQueriesStarted)
                StartUpdating();
            else
            {
                ModbusMemoryEntityViewModels.ForEach((model => model.SetError()));
            }
        }


        public bool IsQueriesStarted
        {
            get { return _isQueriesStarted; }
            set
            {
                _isQueriesStarted = value;
                if (value)
                {
                    StartUpdating();
                }
                else
                {
                    StopUpdating();
                }

                RaisePropertyChanged();
            }
        }

        private void StopUpdating()
        {
            if (DataTransfer.QueryQueue == null) return; 
            var temp =
                DataTransfer.QueryQueue.ToArray()
                    .Where(q => q.IsCycle == false)
                    .Select(q => q)
                    .ToArray();
            DataTransfer.QueryQueue.Clear();
            foreach (var t in temp)
            {
                DataTransfer.QueryQueue.Enqueue(t);
            }
        }

        private void StartUpdating()
        {
            ModbusMemorySettings modbusMemorySettings = _modbusMemorySettingsViewModel.GetModbusMemorySettings();

            Querer=new Slot((ushort)modbusMemorySettings.BaseAdress, (ushort)modbusMemorySettings.NumberOfPoints,"MBNetworkSlot");
            DataTransfer.QueryQueue.Enqueue(new Query(this, true, Accsess.Read));

            //_stopUpdatingAction += _dataProvider.ProceedDataByAddressCycle((o) =>
            //{
            //    if (o is Exception)
            //    {
            //        foreach (var modbusMemoryEntityViewModel in ModbusMemoryEntityViewModels)
            //        {
            //            modbusMemoryEntityViewModel.SetError();
            //        }
            //        return;
            //    }
            //    int index = 0;
            //    foreach (var modbusMemoryEntityViewModel in ModbusMemoryEntityViewModels)
            //    {
            //        modbusMemoryEntityViewModel.SetUshortValue(((ushort[])o)[index]);
            //        index++;
            //    }
            //}, (ushort)modbusMemorySettings.BaseAdress,
            //    (ushort)modbusMemorySettings.NumberOfPoints, ApplicationGlobalNames.QueriesNames.MODBUS_MEMORY_QUERY);
        }

        #endregion

        #region Implementation of IQuery

        public Slot Querer { get; set; }
        public ushort[] Value { get; set; }
        public void Update()
        {
            var res = DataTransfer.ReadWords(Querer);
            if(res==null)return;
            int index = 0;
            foreach (var modbusMemoryEntityViewModel in ModbusMemoryEntityViewModels)
            {
                modbusMemoryEntityViewModel.SetUshortValue(res[index]);
                index++;
            }
        }

        public bool WriteContext()
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}